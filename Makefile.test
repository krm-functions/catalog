# This makefile holds "end-to-end" tests, i.e. function usage with kpt and real manifest manipulation

SHELL=/bin/bash -o pipefail

FN_MODE ?= exec

ifeq ($(CONTAINER_TAG),)
APPLY_SETTERS_IMAGE := ghcr.io/krm-functions/apply-setters@sha256:53aee0c43937b72405a694da26a7aa5f5f0fff459437f6c5ffada479f8b17817
DIGESTER_IMAGE := ghcr.io/krm-functions/digester@sha256:5fb15707649bb9c7f2da140346ca076aea95c2fcfc0a7e7d68ffb1358df56647
GATEKEEPER_SET_ENFORCEMENT_ACTION_IMAGE := ghcr.io/krm-functions/gatekeeper-set-enforcement-action@sha256:cd2
HELM_RENDER_IMAGE := ghcr.io/krm-functions/render-helm-chart@sha256:733271d180c20f368d406e165b161ff196686b8e6c5d2f299e357cfc2a84cc99
HELM_SOURCE_IMAGE := ghcr.io/krm-functions/source-helm-chart@sha256:1e90d713e103b91ca65d19a6b2efd67413c4ca90dcd66cfd2fc2cf45389acb6d
HELM_UPGRADER_IMAGE := ghcr.io/krm-functions/helm-upgrader@sha256:eed131e0ef5433e8a805c98c2d9ad673f480a3034db9e5d14c71f242a0397614
KUBECONFORM_IMAGE := ghcr.io/krm-functions/kubeconform@sha256:1c50e8114b2f2ded0afc7d161b5fec0420d9cb47b766717ed474bb1350d29d9d
PACKAGE_COMPOSITOR_IMAGE := ghcr.io/krm-functions/package-compositor@sha256:820c12e85908384cd6468e4dbda33908614a2f1d6680e2370d1ea7041260f895
REMOVE_LOCAL_CONFIG_RESOURCES_IMAGE := ghcr.io/krm-functions/remove-local-config-resources@sha256:0adbe7c2bdac67a06384ef706a5e77008e19a0416465305fe8f3386fa713183a
SET_ANNOTATIONS_IMAGE := ghcr.io/krm-functions/set-annotations@sha256:b2e7e1b7937c7731f8e3452951a86f073d567a425efd2cea98ee8309a555407a
SET_LABELS_IMAGE := ghcr.io/krm-functions/set-labels@sha256:857f717953b5f22a249a18ea1f6d8845fb0ac0efe13eaa9867a0d72e3bc141e9
else
APPLY_SETTERS_IMAGE := ghcr.io/krm-functions/apply-setters:$(CONTAINER_TAG)
DIGESTER_IMAGE := ghcr.io/krm-functions/digester:$(CONTAINER_TAG)
GATEKEEPER_SET_ENFORCEMENT_ACTION_IMAGE := ghcr.io/krm-functions/gatekeeper-set-enforcement-action:$(CONTAINER_TAG)
HELM_RENDER_IMAGE := ghcr.io/krm-functions/render-helm-chart:$(CONTAINER_TAG)
HELM_SOURCE_IMAGE := ghcr.io/krm-functions/source-helm-chart:$(CONTAINER_TAG)
HELM_UPGRADER_IMAGE := ghcr.io/krm-functions/helm-upgrader:$(CONTAINER_TAG)
KUBECONFORM_IMAGE := ghcr.io/krm-functions/kubeconform:$(CONTAINER_TAG)
PACKAGE_COMPOSITOR_IMAGE := ghcr.io/krm-functions/package-compositor:$(CONTAINER_TAG)
REMOVE_LOCAL_CONFIG_RESOURCES := ghcr.io/krm-functions/remove-local-config-resources:$(CONTAINER_TAG)
SET_ANNOTATIONS_IMAGE := ghcr.io/krm-functions/set-annotations:$(CONTAINER_TAG)
SET_LABELS_IMAGE := ghcr.io/krm-functions/set-labels:$(CONTAINER_TAG)
endif

ifeq ($(FN_MODE),exec)
APPLY_SETTERS := --exec bin/linux_amd64/apply-setters
DIGESTER := --exec bin/linux_amd64/digester
GATEKEEPER_SET_ENFORCEMENT_ACTION := --exec bin/linux_amd64/gatekeeper-set-enforcement-action
HELM_RENDER := --exec bin/linux_amd64/render-helm-chart
HELM_SOURCE := --exec bin/linux_amd64/source-helm-chart
HELM_UPGRADER := --exec bin/linux_amd64/helm-upgrader
KUBECONFORM := --exec bin/linux_amd64/kubeconform
TEMPLATE_KYAML := --exec bin/linux_amd64/template-kyaml
PACKAGE_COMPOSITOR := --exec bin/linux_amd64/package-compositor
REMOVE_LOCAL_CONFIG_RESOURCES := --exec bin/linux_amd64/remove-local-config-resources
SET_ANNOTATIONS := --exec bin/linux_amd64/set-annotations
SET_LABELS := --exec bin/linux_amd64/set-labels
else
APPLY_SETTERS := --image $(APPLY_SETTERS_IMAGE)
DIGESTER := --network --image $(DIGESTER_IMAGE)
GATEKEEPER_SET_ENFORCEMENT_ACTION := --image $(GATEKEEPER_SET_ENFORCEMENT_ACTION_IMAGE)
HELM_RENDER := --network --image $(HELM_RENDER_IMAGE)
HELM_SOURCE := --network --image $(HELM_SOURCE_IMAGE)
HELM_UPGRADER := --network --image $(HELM_UPGRADER_IMAGE)
KUBECONFORM := --network --image $(KUBECONFORM_IMAGE)
PACKAGE_COMPOSITOR := --network --image $(PACKAGE_COMPOSITOR_IMAGE)
REMOVE_LOCAL_CONFIG_RESOURCES := --network --image $(REMOVE_LOCAL_CONFIG_RESOURCES_IMAGE)
SET_ANNOTATIONS := --network --image $(SET_ANNOTATIONS_IMAGE)
SET_LABELS := --network --image $(SET_LABELS_IMAGE)
endif

BASELINE_RENDER_HELM_CHART := gcr.io/kpt-fn/render-helm-chart:v0.2.2

e2e-tests: render-helm-chart-example \
	   render-helm-chart-example2 \
	   render-with-kube-version \
	   test-apply-setters \
	   test-digester \
	   test-gatekeeper-set-enforcement-action \
	   test-helm-upgrader \
	   test-kubeconform \
	   test-package-compositor-e2e \
	   test-remove-local-config-resources \
	   test-render-helm-chart \
	   test-set-annotations \
	   test-set-labels \
	   test-source-helm-chart

# BEWARE: These tests are fragile - we want to test upgrades, but without upgrade-constraints tests might fail when charts are updated
.PHONY: test-helm-upgrader
test-helm-upgrader:
	rm -rf tmp-results
	kpt fn source examples/helm-upgrader | kpt fn eval - --fn-config example-function-configs/config-upgrade-helm-version-inline.yaml --truncate-output=false --results-dir tmp-results $(HELM_UPGRADER) > test-out.yaml
	grep -e '.*upgrade-available: .*cert-manager:v1.8.2' test-out.yaml
	grep -e '.*upgrade-available.0: .*cert-manager:v1.12.1' test-out.yaml
	grep -e '.*upgrade-available.0: .*metacontroller-helm:v4.10.0' test-out.yaml
	grep -e '.*upgrade-available.0: .*karpenter:0.35.0' test-out.yaml
	grep -e '.*upgrade-available.1: .*/external-secrets:0.14.3' test-out.yaml
	rm test-out.yaml
	rm -rf tmp-results

.PHONY: test-render-helm-chart
test-render-helm-chart:
	# For reference, render chart using baseline function
	rm -rf rendered-output
	echo "" | kpt fn eval - --network --fn-config examples/render-helm-chart2/argo-workflows.yaml -i ${BASELINE_RENDER_HELM_CHART} | kpt fn sink rendered-output
	# Source step, fetch chart from upstream, but do not render
	rm -rf sourced-output
	kpt fn source examples/render-helm-chart2 | kpt fn eval - ${HELM_RENDER} --results-dir results2 | kpt fn sink sourced-output
	grep -e 'message: sourcing with render-helm-chart is deprecated' results2/results.yaml
	# Render from previously sourced chart
	rm -rf rendered-output2
	kpt fn source sourced-output | kpt fn eval - ${HELM_RENDER} | kpt fn sink rendered-output2
	diff -q rendered-output rendered-output2
	rm -rf rendered-output sourced-output rendered-output2 results2

# Example usage from docs/render-helm-chart.md
.PHONY: render-helm-chart-example
render-helm-chart-example:
	kpt fn source examples/render-helm-chart | kpt fn eval - ${HELM_SOURCE} | kpt fn sink my-cert-manager-package
	grep -q 'apiVersion: experimental.helm.sh/v1alpha1' my-cert-manager-package/cert-manager-chart.yaml
	cp examples/render-helm-chart/Kptfile my-cert-manager-package/
	kpt fn render my-cert-manager-package -o stdout | grep -q 'team-name: blue-team'
	rm -rf my-cert-manager-package

.PHONY: render-helm-chart-example2
render-helm-chart-example2:
	kpt fn source examples/render-helm-chart/non-stardard-tar-filename | kpt fn eval - ${HELM_RENDER} | kpt fn sink my-non-stardard-tar-filename
	rm -rf my-non-stardard-tar-filename

# Test rendering using Capabilities.KubeVersion
.PHONY: render-with-kube-version
render-with-kube-version:
	mkdir _tmp
	helm package test-data/test-chart
	scripts/source-chart.sh test-data/render-test-chart.yaml test-chart-0.1.0.tgz > _tmp/render.yaml
	rm test-chart-0.1.0.tgz
	# Note, no patch version
	sed -i 's/kubeVersion: .*/kubeVersion: 1.29/' _tmp/render.yaml
	kpt fn source _tmp | kpt fn eval - ${HELM_RENDER} | kpt fn sink _tmp-output
	cat _tmp-output/configmap_foo.yaml
	grep -q 'kubeVersion: "v1.29.0"' _tmp-output/configmap_foo.yaml
	grep -q 'kubeVersionMinor: "29"' _tmp-output/configmap_foo.yaml
	rm -rf _tmp-output
	sed -i 's/kubeVersion: .*/kubeVersion: 1.30.0/' _tmp/render.yaml
	kpt fn source _tmp | kpt fn eval - ${HELM_RENDER} | kpt fn sink _tmp-output
	cat _tmp-output/configmap_foo.yaml
	grep -q 'kubeVersion: "v1.30.0"' _tmp-output/configmap_foo.yaml
	grep -q 'kubeVersionMinor: "30"' _tmp-output/configmap_foo.yaml
	rm -rf _tmp _tmp-output

.PHONY: test-source-helm-chart
test-source-helm-chart:
	kpt fn source examples/render-helm-chart3 | kpt fn eval - --truncate-output=false $(HELM_SOURCE) > test-out.txt
	grep -e 'experimental.helm.sh/chart-sum/karpenter' test-out.txt
	grep -e 'experimental.helm.sh/chart-sum/cert-manager' test-out.txt
	rm test-out.txt

.PHONY: test-apply-setters
test-apply-setters: test-apply-setters1 test-apply-setters2

.PHONY: test-apply-setters1
test-apply-setters1:
	kpt fn source examples/apply-setters | kpt fn eval - --truncate-output=false $(APPLY_SETTERS) --fn-config example-function-configs/apply-setters/cm-setters.yaml | kpt fn eval - -i $(REMOVE_LOCAL_CONFIG_RESOURCES_IMAGE) -o unwrap > test-out.yaml
	grep -e 'foo: "valueFoo"' test-out.yaml
	grep -e 'bar: "valueBar"' test-out.yaml
	grep -e 'baz: "valueBaz"' test-out.yaml
	grep -e 'replicas: ""' test-out.yaml
	grep -e 'combined: "valueBar-valueBaz"' test-out.yaml
	grep -e 'app.kubernetes.io/version: ""' test-out.yaml
	rm test-out.yaml

.PHONY: test-apply-setters2
test-apply-setters2:
	kpt fn source examples/apply-setters | kpt fn eval - --truncate-output=false $(APPLY_SETTERS) --fn-config example-function-configs/apply-setters/apply-setters-fn-config.yaml | kpt fn eval - -i $(REMOVE_LOCAL_CONFIG_RESOURCES_IMAGE) -o unwrap > test-out.yaml
	grep -e 'foo: ""' test-out.yaml
	grep -e 'bar: "valueBar"' test-out.yaml
	grep -e 'baz: "valueBaz"' test-out.yaml
	grep -e 'replicas: "4"' test-out.yaml
	grep -e 'combined: "valueBar-valueBaz"' test-out.yaml
	grep -e 'app.kubernetes.io/version: "a1b2c3d4e5e6"' test-out.yaml
	rm test-out.yaml

.PHONY: test-digester
test-digester: test-digester-step1 test-digester-step3 test-digester-output

.PHONY: test-digester-step1
test-digester-step1:
	rm -rf digester-tmp0
	kpt fn source examples/digester | kpt fn eval - --truncate-output=false $(HELM_SOURCE) | kpt fn sink digester-tmp0

.PHONY: test-digester-step2
test-digester-step2:
	kpt fn source digester-tmp0 | kpt fn eval - --truncate-output=false $(DIGESTER) > test-out.txt
	head -n 60 test-out.txt

.PHONY: test-digester-step3
test-digester-step3:
	rm -rf digester-tmp1
	kpt fn source digester-tmp0 | kpt fn eval - --truncate-output=false $(DIGESTER) | kpt fn sink digester-tmp1
	kpt fn render digester-tmp1 -o unwrap > test-out.yaml

.PHONY: test-digester-output
test-digester-output:
	grep 'image: "quay.io/jetstack/cert-manager-controller@sha256:.*' test-out.yaml
	grep 'image: "quay.io/jetstack/cert-manager-cainjector@sha256:.*' test-out.yaml
	grep 'image: "quay.io/jetstack/cert-manager-webhook@sha256:.*' test-out.yaml
	grep 'image: "quay.io/jetstack/cert-manager-ctl@sha256:.*' test-out.yaml

.PHONY: test-digester-w-containers
test-digester-w-containers:
	echo "** sourcing step"
	rm -rf cert-manager-package
	kpt fn source examples/digester \
	  | kpt fn eval - $(HELM_SOURCE) \
	  | kpt fn eval - --truncate-output=false $(DIGESTER) \
	  | kpt fn sink cert-manager-package

.PHONY: test-digester-w-containers2
test-digester-w-containers2:
	echo "** rendering using pipeline in Ktfile"
	rm -rf cert-manager-rendered
	kpt fn render cert-manager-package -o stdout | kpt fn sink cert-manager-rendered

PHONY: test-gatekeeper-set-enforcement-action
test-gatekeeper-set-enforcement-action:
	kpt fn source examples/gatekeeper-set-enforcement-action | kpt fn eval - --truncate-output=false $(GATEKEEPER_SET_ENFORCEMENT_ACTION) -o unwrap -- enforcementAction=deny > test-out.yaml
	if [ "$$(grep 'enforcementAction: deny' test-out.yaml | wc -l)" != "2" ]; then echo "*** error setting enforcementAction"; exit 1; fi

#KUBECONFORM_SCHEMA_LOCATIONS ?= "default"
KUBECONFORM_SCHEMA_LOCATIONS ?= 'examples/kubeconform/schema-bundle/,examples/kubeconform/schema-bundle/CRDs-catalog/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json'

.PHONY: test-kubeconform
test-kubeconform:
	rm -rf tmp-results
	#kpt fn source examples/kubeconform/manifests | kpt fn eval - --results-dir tmp-results --truncate-output=false $(KUBECONFORM) -- ignore_missing_schemas=true kubernetes_version=1.29.1 schema_locations=$(KUBECONFORM_SCHEMA_LOCATIONS) > test-out.txt || true
	kpt fn source examples/kubeconform/manifests | kpt fn eval - --results-dir tmp-results --truncate-output=false $(KUBECONFORM) -- schema_locations=$(KUBECONFORM_SCHEMA_LOCATIONS) debug=true > test-out.txt || true
	make test-kubeconform-results

.PHONY: test-kubeconform-w-container
test-kubeconform-w-container:
	rm -rf tmp-results
	kpt fn source examples/kubeconform/manifests | kpt fn eval - --results-dir tmp-results --truncate-output=false -i $(KUBECONFORM_IMAGE) -- ignore_missing_schemas=true schema_locations=$(KUBECONFORM_SCHEMA_LOCATIONS) > test-out.txt || true
	make test-kubeconform-results

.PHONY: test-kubeconform-results
test-kubeconform-results:
	grep -e '.* /data/nested: expected string or null, but got object' tmp-results/results.yaml
	grep -e '.* name: invalid-nested-dict' tmp-results/results.yaml
	grep -e '.* /data/a-number: expected string or null, but got number' tmp-results/results.yaml
	grep -e '.* name: invalid-non-string-value' tmp-results/results.yaml

LOCAL_PACKAGES_DIR ?= /tmp/package-compositor

.PHONY: test-package-compositor-e2e
test-package-compositor-e2e: test-package-compositor test-package-compositor-ref
	# We don't set all annotations and comments exactly as kpt
	if [ "$(shell diff -rw fn-output/fleet-1/example-fleet example-fleet-ref | wc -l)" != "40" ]; then echo "*** source-package diff not as expected"; exit 1; fi

.PHONY: test-remove-local-config-resources
test-remove-local-config-resources:
	rm -rf tmp-results fn-output
	kpt fn source examples/remove-local-config-resources | kpt fn eval - --results-dir tmp-results --truncate-output=false $(REMOVE_LOCAL_CONFIG_RESOURCES) | kpt fn sink fn-output
	kpt pkg tree fn-output
	tree fn-output
	if grep -q 'name: cm2' fn-output/*; then echo "*** found resource that should have been removed"; exit 1; fi

.PHONY: test-package-compositor
test-package-compositor:
	rm -rf tmp-results fn-output
	kpt fn source examples/package-compositor/specs | kpt fn eval - --results-dir tmp-results --truncate-output=false $(PACKAGE_COMPOSITOR) | kpt fn sink fn-output
	kpt pkg tree fn-output
	tree fn-output

.PHONY: test-package-compositor-ref
test-package-compositor-ref:
	# This is identical to 'examples/package-compositor/specs/fleet-1/packages.yaml'
	rm -rf example-fleet-ref && mkdir -p example-fleet-ref/olo
	kpt pkg get https://github.com/krm-functions/catalog.git/examples/package-compositor/pkg1 example-fleet-ref/foo --for-deployment
	kpt pkg get https://github.com/krm-functions/catalog.git/examples/package-compositor/pkg2 example-fleet-ref/bar --for-deployment
	kpt pkg get https://github.com/krm-functions/catalog.git/examples/package-compositor/pkg3 example-fleet-ref/bar/baz1 --for-deployment
	kpt pkg get https://github.com/krm-functions/catalog.git/examples/package-compositor/pkg1 example-fleet-ref/bar/baz2 --for-deployment
	kpt pkg get https://github.com/krm-functions/catalog.git/examples/package-compositor/pkg4 example-fleet-ref/olo/baz --for-deployment

.PHONY: test-set-annotations
test-set-annotations:
	kpt fn source examples/set-labels | kpt fn eval - --truncate-output=false $(SET_ANNOTATIONS) -o unwrap -- l1=v1 l2=v2 | \
		yq -e '.metadata.annotations.l1|contains("v1")'
	kpt fn source examples/set-labels | kpt fn eval - --truncate-output=false $(SET_ANNOTATIONS) --fn-config example-function-configs/set-annotations/configmap.yaml -o unwrap | \
		yq -e '.metadata.annotations.foo|contains("bar")'
	kpt fn source examples/set-labels | kpt fn eval - --truncate-output=false $(SET_ANNOTATIONS) --fn-config example-function-configs/set-annotations/setannotations.yaml -o unwrap | \
		yq -e '.metadata.annotations.baz|contains("olo")'

.PHONY: test-set-labels
test-set-labels:
	kpt fn source examples/set-labels | kpt fn eval - --truncate-output=false $(SET_LABELS) -o unwrap -- l1=v1 l2=v2 | \
		yq -e '.metadata.labels.l1|contains("v1")'
	kpt fn source examples/set-labels | kpt fn eval - --truncate-output=false $(SET_LABELS) --fn-config example-function-configs/set-labels/configmap.yaml -o unwrap | \
		yq -e '.metadata.labels.foo|contains("bar")'
	kpt fn source examples/set-labels | kpt fn eval - --truncate-output=false $(SET_LABELS) --fn-config example-function-configs/set-labels/setlabels.yaml -o unwrap | \
		yq -e '.metadata.labels.baz|contains("olo")'

.PHONY: test-template-kyaml
test-template-kyaml:
	kpt fn source examples/template | kpt fn eval - --truncate-output=false $(TEMPLATE_KYAML) -- someConfig=aTestConfigString > test-out.txt
	kpt fn source examples/template | kpt fn eval - --truncate-output=false $(TEMPLATE_KYAML) > test-out.txt
